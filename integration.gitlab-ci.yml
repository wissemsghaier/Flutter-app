stages:
  - checkout
  - fetch_Packages
  - test
  - build
  - distribute
  - package
  - upload
  

variables:
  NEXUS_CREDENTIALS_ID: 'nexus-jenkins'
  NEXUS_URL: 'https://nexus.u-cloudsolutions.xyz'
  NEXUS_REPOSITORY: 'student-repository'
  GROUP_ID: 'com.artificial.Flutter'
  ARTIFACT_ID: 'artifact'
  ZIP_FILE_NAME: '${ARTIFACT_ID}-${COMMIT_ID}.zip'
  COMMIT_ID: $(git rev-parse --short HEAD)

  BRANCH_NAME: "${CI_COMMIT_REF_NAME}"
  BUILD_NUMBER: "${CI_PIPELINE_ID}"

  TARGET_BRANCH: "${TARGET_BRANCH}"

  APK_PATH: "build/app/outputs/flutter-apk/app-release.apk"
  APPCENTER_API_TOKEN: "a207dec6e1f58a2d3d003b623e2c4377caee0b89" # Remplace par une variable sécurisée
  OWNER_NAME: "sghaier-fss.u-sfax.tn"
  APP_NAME: "flutter-app"
  DISTRIBUTION_GROUP: "flutter-app"

checkout:
  stage: checkout
  tags:
    - flutter
  script:
    - echo "Checking out the repository"
    - git rev-parse --short HEAD > commit_hash.txt
    - export COMMIT_ID=$(cat commit_hash.txt)
    - export ZIP_FILE_NAME="${ARTIFACT_ID}-${COMMIT_ID}.zip"
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

fetch_Packages:
  stage: fetch_Packages
  tags:
    - docker-flutter
  script:
    - flutter pub get
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

test:
  stage: test
  tags:
    - docker-flutter
  script:
    - flutter test
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

build:
  stage: build
  tags:
    - docker-flutter
  script:
    - flutter build apk --release --build-name="${BRANCH_NAME}" --build-number="${BUILD_NUMBER}"
  artifacts:
    paths:
      - build/app/outputs/flutter-apk/app-release.apk
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

distribute_apk:
  stage: distribute
  script:
    - |
      # Générer le tag basé sur le numéro de build, la branche ou l'ID de commit
      - tagName="v${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${COMMIT_ID}"
      echo "Tag pour la distribution: ${TAG_NAME}"

       # Vérifier si l'APK existe avant la distribution
      if [ -f "$APK_PATH" ]; then
        echo "APK trouvé à ${APK_PATH}. Procédure de distribution en cours."

        # Étape 1: Obtenir une URL de téléchargement en appelant l'API d'App Center
        UPLOAD_ID=$(curl -X POST \
          -H "X-API-Token: $APPCENTER_API_TOKEN" \
          -H "accept: application/json" \
          "https://api.appcenter.ms/v0.1/apps/$OWNER_NAME/$APP_NAME/release_uploads" | jq -r '.upload_id')

        UPLOAD_URL=$(curl -X POST \
          -H "X-API-Token: $APPCENTER_API_TOKEN" \
          -H "accept: application/json" \
          "https://api.appcenter.ms/v0.1/apps/$OWNER_NAME/$APP_NAME/release_uploads" | jq -r '.upload_url')

        # Étape 2: Upload de l'APK
        curl -F "ipa=@$APK_PATH" "$UPLOAD_URL"

        # Étape 3: Finaliser le téléchargement
        curl -X PATCH \
          -H "X-API-Token: $APPCENTER_API_TOKEN" \
          -H "accept: application/json" \
          -d '{"status": "committed"}' \
          "https://api.appcenter.ms/v0.1/apps/$OWNER_NAME/$APP_NAME/release_uploads/$UPLOAD_ID"

        # Étape 4: Distribuer à un groupe de distribution
        curl -X PATCH \
          -H "X-API-Token: $APPCENTER_API_TOKEN" \
          -H "accept: application/json" \
          -H "Content-Type: application/json" \
          -d "{\"destination_name\": \"$DISTRIBUTION_GROUP\", \"release_notes\": \"Branch: ${CI_COMMIT_REF_NAME:-main} - Build ${CI_PIPELINE_IID}\"}" \
          "https://api.appcenter.ms/v0.1/apps/$OWNER_NAME/$APP_NAME/releases/$UPLOAD_ID"

        echo "Distribution de l'APK réussie avec le tag ${TAG_NAME}"
      else
        echo "Erreur: APK non trouvé à ${APK_PATH}. Distribution annulée."
        exit 1
      fi
  only:
    - main
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always


package:
  stage: package
  tags:
    - flutter
  script:
    - echo "Cleaning up old ZIP files..."
    - rm -f artifact-*.zip
    - echo "Packaging project..."
    - COMMIT_ID=$(git rev-parse --short HEAD)
    - ZIP_FILE_NAME="artifact-${COMMIT_ID}.zip"
    - echo "Packaging project as ${ZIP_FILE_NAME}..."
    - zip -r ${ZIP_FILE_NAME} .
    - ls -l ${ZIP_FILE_NAME}

  artifacts:
    paths:
      - artifact-*.zip
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

upload:
  stage: upload
  tags:
    - flutter
  script:
    - echo "Determining commit ID..."
    - COMMIT_ID=$(git rev-parse --short HEAD)
    - ZIP_FILE_NAME="artifact-${COMMIT_ID}.zip"
    - echo "Uploading ${ZIP_FILE_NAME} to Nexus..."
    - UPLOAD_URL="${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${GROUP_ID//./\/}/${ARTIFACT_ID}/${COMMIT_ID}/${ZIP_FILE_NAME}"
    - pwd  # Print working directory
    - find . -name "*.zip"  # Find ZIP files
    - ls -l ${ZIP_FILE_NAME}  # Verify file existence
    - curl -u wissem:3FqNnJ6XzF --upload-file "${ZIP_FILE_NAME}" "${UPLOAD_URL}"


  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always
