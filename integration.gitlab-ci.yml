stages:
  - checkout
  - fetch_Packages
  - test
  - build
  - distribute
  - package
  - upload
  
variables:
  NEXUS_CREDENTIALS_ID: 'nexus-jenkins'
  NEXUS_URL: 'https://nexus.u-cloudsolutions.xyz'
  NEXUS_REPOSITORY: 'student-repository'
  GROUP_ID: 'com.artificial.Flutter'
  ARTIFACT_ID: 'artifact'
  ZIP_FILE_NAME: '${ARTIFACT_ID}-${COMMIT_ID}.zip'
  COMMIT_ID: $(git rev-parse --short HEAD)

  BRANCH_NAME: "${CI_COMMIT_REF_NAME}"
  BUILD_NUMBER: "${CI_PIPELINE_ID}"

  TARGET_BRANCH: "${TARGET_BRANCH}"

  APK_PATH: "build/app/outputs/flutter-apk/app-release.apk"
  APPCENTER_API_TOKEN: "a207dec6e1f58a2d3d003b623e2c4377caee0b89"  # Remplacer par une variable sécurisée dans GitLab CI/CD
  APP_OWNER_NAME: "sghaier-fss.u-sfax.tn"
  APP_NAME: "flutter-app"
  DISTRIBUTION_GROUP: "flutter-app"

checkout:
  stage: checkout
  tags:
    - flutter
  script:
    - echo "Checking out the repository"

    - git rev-parse --short HEAD > commit_hash.txt
    - export COMMIT_ID=$(cat commit_hash.txt)
    - export COMMIT_ID=$(git rev-parse --short HEAD)
    - export ZIP_FILE_NAME="${ARTIFACT_ID}-${COMMIT_ID}.zip"
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

fetch_Packages:
  stage: fetch_Packages
  tags:
    - docker-flutter
  script:
    -  apt-get install -y nodejs
    - npm install -g appcenter-cli
    - flutter pub get

  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

test:
  stage: test
  tags:
    - docker-flutter
  script:
    - flutter test
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

build:
  stage: build
  tags:
    - docker-flutter
  script:

    - flutter build apk --release --build-name="${BRANCH_NAME}" --build-number="${BUILD_NUMBER}"
  artifacts:
    paths:
      - build/app/outputs/flutter-apk/app-release.apk
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

distribute_apk:
  stage: distribute
  tags:
    - docker-flutter
  script:
    - |
      echo "Logging in to App Center..."
      appcenter login --token $APPCENTER_API_TOKEN
      echo "Tagging APK..."
      TAG_NAME="v${BUILD_NUMBER}-${BRANCH_NAME}-${COMMIT_ID}"
      echo "Distributing APK with tag: ${TAG_NAME}"
      appcenter distribute release -f $APK_PATH -g $DISTRIBUTION_GROUP --app $APP_OWNER_NAME/$APP_NAME --release-notes "Build ${BUILD_NUMBER} - Branch ${BRANCH_NAME} - Commit ${COMMIT_ID}"
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always


package:
  stage: package
  tags:
    - flutter
  script:
    - echo "Cleaning up old ZIP files..."
    - rm -f artifact-*.zip
    - echo "Packaging project..."
    - COMMIT_ID=$(git rev-parse --short HEAD)
    - ZIP_FILE_NAME="artifact-${COMMIT_ID}.zip"
    - echo "Packaging project as ${ZIP_FILE_NAME}..."
    - zip -r ${ZIP_FILE_NAME} .
    - ls -l ${ZIP_FILE_NAME}

  artifacts:
    paths:
      - artifact-*.zip
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always

upload:
  stage: upload
  tags:
    - flutter
  script:
    - echo "Determining commit ID..."
    - COMMIT_ID=$(git rev-parse --short HEAD)
    - ZIP_FILE_NAME="artifact-${COMMIT_ID}.zip"
    - echo "Uploading ${ZIP_FILE_NAME} to Nexus..."
    - UPLOAD_URL="${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${GROUP_ID//./\/}/${ARTIFACT_ID}/${COMMIT_ID}/${ZIP_FILE_NAME}"
    - pwd  # Print working directory
    - find . -name "*.zip"  # Find ZIP files
    - ls -l ${ZIP_FILE_NAME}  # Verify file existence
    - curl -u wissem:3FqNnJ6XzF --upload-file "${ZIP_FILE_NAME}" "${UPLOAD_URL}"


  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
      when: always
